<?php

/**
 * Implements hook_help().
 */
function vkxp_help($path, $arg) {
  switch ($path) {

    case 'admin/settings/vkxp':
      return t('Vkontakte CrossPoster module allows users to post nodes automatically to social network vkontakte.ru.');

    case 'admin/help#vkxp':
      $output  = '';
      $output .= '<p>' . t('Vkontakte CrossPoster module allows users to post nodes automatically to social network vkontakte.ru.') . '</p>';
      $output .= '<p>' . t('It requires creating web site application http://vkontakte.ru/apps.php?act=add&site=1') . '</p>';
      $output .= '<p>' . t('After creating application you should go to module settings page and put there secret code and application ID') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function vkxp_menu() {

  $items = array();

  $items['admin/config/services/vkxp'] = array(
    'title'            => 'VKontakte CrossPoster',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vkxp_admin_main_settings'),
    'access arguments' => array('administer vkontakte crossposter'),
    'file'             => 'vkxp.admin.inc',
  );

  $items['admin/config/services/vkxp/main'] = array(
    'title'            => 'Main settings',
    'file'             => 'vkxp.admin.inc',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 0,
  );

  $items['admin/config/services/vkxp/node'] = array(
    'title'            => 'Node settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vkxp_admin_node_settings'),
    'access arguments' => array('administer vkontakte crossposter'),
    'file'             => 'vkxp.admin.inc',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 1,
  );

  $items['admin/config/services/vkxp/images'] = array(
    'title'            => 'Images settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vkxp_admin_images_settings'),
    'access arguments' => array('administer vkontakte crossposter'),
    'file'             => 'vkxp.admin.inc',
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 2,
  );
  
  $items['vkxp/captcha'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('vkxp_captcha_form'),
    'access callback'  => TRUE,
    'file'             => 'vkxp.pages.inc',
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function vkxp_permission() {
  return array(
    'administer vkontakte crossposter' => array(
      'title' => t('Administer vkontakte crossposter'),
      'description' => t('Change settings of vkxp module behavior.'),
    ),
    'post to vkontakte' => array(
      'title' => t('Post nodes to vkontakte.ru'),
      'description' => t('Allows user to post nodes automatically to vkontakte.ru.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function vkxp_form_alter(&$form, &$form_state, $form_id) {
  $node_types = _vkxp_get_selected_node_types();
  foreach ($node_types as $node_type) {
    if ($form_id == $node_type . '_node_form') {
      _vkxp_process_node_form($form);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function vkxp_node_insert($node) {
  // Post node to vk.com.
  _vkxp_process_node($node);
}

/**
 * Implements hook_node_update().
 */
function vkxp_node_update($node) {
  // Post node to vk.com.
  _vkxp_process_node($node);
}

/**
 * Implements hook_init().
 */
function vkxp_init() {

  // Check user session for vkxp scripts.
  $overlay_enabled  = isset($_REQUEST['render']) && $_REQUEST['render'] == 'overlay';
  $vkxp_data_exists = isset($_SESSION['vkxp']) && sizeof($_SESSION['vkxp']) > 0;
  if (!$overlay_enabled && $vkxp_data_exists) {

    // Get script for the first node in the user session.
    $script = array_shift($_SESSION['vkxp']);
    $app_id = variable_get('vkxp_app_id', '');

    // Add settings for crossposting to the page.
    drupal_add_js(
      array('vkxp' =>
        array(
          'app_id'      => $app_id,
          'owner_id'    => $script['owner_id'],
          'message'     => $script['message'],
          'from_group'  => $script['from_group'],
          'attachments' => $script['attachments'],
        )
      ), 'setting');

    // Add js for Open API jquery to vk.com.
    drupal_add_js(drupal_get_path('module', 'vkxp') . '/vkxp.js');
  }
}

/**
 * Add vkxp fieldset to node forms.
 * @param $form: node form.
 */
function _vkxp_process_node_form(&$form) {
  $user_has_access = user_access('post to vkontakte');
  $vkxp_enabled    = variable_get('vkxp_enable', 0);
  if ($user_has_access && $vkxp_enabled) {
    $form['vkxp'] = array(
      '#type' => 'fieldset',
      '#title' => t('VKontakte crossposter'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => -10,
      '#group' => 'additional_settings',
    );
    $form['vkxp']['vkxp_post_this_node'] = array(
      '#type' => 'checkbox',
      '#title' => t('Post this node to vkontakte.ru'),
      '#default_value' => variable_get('vkxp_enabled_default', 0)
    );
    if (!function_exists('curl_init')) {
      $form['vkxp']['vkxp_post_this_node']['#disabled']    = TRUE;
      $form['vkxp']['vkxp_post_this_node']['#value']       = 0;
      $form['vkxp']['vkxp_post_this_node']['#description'] = t("You can't crosspost nodes until cURL library is not installed on your server");
    }
  }
}

/**
 * Process $node and send it to vkontakte.ru if needed.
 */
function _vkxp_process_node($node) {

  $selected_types = _vkxp_get_selected_node_types();

  // If current node is in selected types list - crosspost it.
  if (in_array($node->type, $selected_types)) {

    global $user;
    // Collect data and check access to crosspost nodes.
    $access_token = variable_get('vkxp_access_token', '');
    $vkxp_enabled = variable_get('vkxp_enable', 0);
    $user_access  = user_access('post to vkontakte');
    $post_node    = FALSE;

    if (isset($node->vkxp_post_this_node)) {
      $post_node = $node->vkxp_post_this_node;
    }

    // Check requiered data to post.
    if ($access_token && $vkxp_enabled && $user_access && $post_node) {    

      // Clear cached data if user wants to add link to this page.
      // If cache will not be cleared, vkontakte may not post this node due to unaccessable node url.
      $add_link_to_node = variable_get('vkxp_add_link', 0);
      $cache_disabled   = variable_get('cache', 0) ? FALSE : TRUE;
      if ($add_link_to_node && !$cache_disabled) {
        cache_clear_all(NULL, 'cache_page');
      }

      // Get absolute node link.
      $url = url('node/' . $node->nid, array('absolute' => TRUE));

      // Get message from node.
      $post_object   = variable_get('vkxp_post_object', 'body');
      if ($post_object == 'body') {
        $body    = array_shift($node->body);
        $message = trim(strip_tags($body[0]['value']));
      }
      elseif ($post_object == 'title') {
        $message = trim(check_plain($node->title));
      }
      else {
        $body    = array_shift($node->body);
        $message = trim(check_plain($node->title)) . "\n\n" . trim(strip_tags($body[0]['value']));
      }

      // Trim message if needed.
      $cut_message = variable_get('vkxp_cut_message', 1);
      if ($cut_message) {
        $length = variable_get('vkxp_cut_message_length', 255);
        if (drupal_strlen($message) > $length) {
          $message = drupal_substr($message, 0, $length - 3) . '...';
        }
      }

      // Decode special symbols.
      $message = html_entity_decode($message, ENT_QUOTES, 'UTF-8');
      $message = htmlspecialchars_decode($message);

      // Post node to vk.com.
      $images    = _vkxp_get_node_images($node);
      $image_ids = '';
      if ($images) {
        $upload_url = _vkxp_get_upload_server();
        $image_ids  = _vkxp_upload_images($upload_url, $images);
      }
      _vkxp_post_to_wall($message, $image_ids, $url, $node);
    }
  }
}

/**
 * Function makes query to vk.com.
 * Allows using hook_vkxp_query_alter() for altering query params.
 */
function vkxp_query($method, $params, $request_url = 'https://api.vk.com/method/') {

  // Collect query data.
  $query = array();
  $query['method'] = $method;
  $query['params'] = $params;
  $query['request_url'] = $request_url;
  drupal_alter('vkxp_query', $query);

  // cURL request to vk.com.
  $curl = curl_init();
  curl_setopt ($curl, CURLOPT_URL, $query['request_url'] . $query['method']);
  curl_setopt ($curl, CURLOPT_POST, 1);
  curl_setopt ($curl, CURLOPT_POSTFIELDS, $query['params']);
  curl_setopt ($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt ($curl, CURLOPT_RETURNTRANSFER, 1);
  $result = curl_exec($curl);
  curl_close($curl);
  return json_decode($result, true);
}

/**
 * Get images from selected imagefield.
 * @param $node: node object.
 * @return array: array with images for uploading.
 */
function _vkxp_get_node_images($node) {
  $images = array();
  $image_amount = variable_get('vkxp_' . $node->type . '_image_amount', 0);
  if ($image_amount) {
    $field = variable_get('vkxp_' . $node->type . '_image_field', '');
    if ($field && isset($node->$field)) {
      $i = 0;
      $image_field = $node->$field;
      $img_array = array_shift($image_field);
      foreach ($img_array as $image) {
        if ($image['fid']) {
          if ($i++ == $image_amount) {
            break;
          }
          $images[] = _vkxp_get_real_imagepath($image['fid']);
        }
      }
    }
  }
  return $images;
}

/**
 * @return array: node types selected for crossposting.
 */
function _vkxp_get_selected_node_types() {

  // Get node types that should be crossposted.
  $types = variable_get('vkxp_node_types', array());
  $selected_types = array();
  foreach ($types as $key => $type) {
    if ($type) {
      $selected_types[$key] = $type;
    }
  }
  return $selected_types;
}

/**
 * Makes http query to api server to get upload uri.
 * @return upload url on success or FALSE on failure.
 */
function _vkxp_get_upload_server() {
  $params = array();
  if (variable_get('vkxp_wall_owner', 'group') == 'group') {
    $params['gid'] = variable_get('vkxp_group_id', '');
  }
  else {
    $params['uid'] = variable_get('vkxp_group_id', '');
  }
  $params['access_token'] = variable_get('vkxp_access_token', '');
  $result = vkxp_query('photos.getWallUploadServer', $params);
  if ($result['response']['upload_url']) {
    return $result['response']['upload_url'];
  }
  elseif ($result['error']) {
    _vkxp_watchdog(
      array('text' => t('Unable to recieve upload server. Error: !error',
      array('!error' => $result['error']['error_msg'])), 'severity' => 'error')
    );
  }
  return FALSE;
}

/**
 * Upload and save images to vk server.
 * @param  $upload_url: url of upload server.
 * @param  $images: array of images to upload.
 * @return string with uploaded image IDs separated by comma. Example: photo312312_3123123,photo312312_3123124.
 */
function _vkxp_upload_images($upload_url, $images) {

  // Array with saved image IDs.
  $image_ids = array();
  foreach ($images as $image) {

    // Upload photo.
    $upload_result = vkxp_query('', array('photo' => $image), $upload_url);

    // If photo was uploaded it should be saved.
    if ($upload_result['server'] && $upload_result['photo'] && $upload_result['hash']) {
      $params = array();
      $params['access_token'] = variable_get('vkxp_access_token', '');
      $params['server']       = $upload_result['server'];
      $params['photo']        = $upload_result['photo'];
      $params['hash']         = $upload_result['hash'];
      if (variable_get('vkxp_wall_owner', 'group') == 'group') {
        $params['gid'] = variable_get('vkxp_group_id', '');
      }
      else {
        $params['uid'] = variable_get('vkxp_group_id', '');
      }

      // Upload query to vk.com.
      $save_result = vkxp_query('photos.saveWallPhoto', $params);

      // If image was successfully saved it returns photo ID in format 'photoXXXXXXX_XXXXXXX'.
      if ($save_result['response'][0]['id']) {
        $image_ids[] = $save_result['response'][0]['id'];
      }
    }
  }
  if ($image_ids) {
    return implode (',', $image_ids);
  }
  return '';
}

/**
 * Post node message with uploaded images to wall.
 * @param  $message: text to post.
 * @param  $images: string with photo IDs to post.
 * @param  $url: absolute link to posted node.
 * @return array: server response.
 */
function _vkxp_post_to_wall($message, $images, $url, $node) {
  $params = array();
  $params['from_group'] = variable_get('vkxp_official', 1);
  if (variable_get('vkxp_wall_owner', 'group') == 'group') {
    $params['owner_id'] = '-' . variable_get('vkxp_group_id', '');
  }
  else {
    $params['owner_id'] = variable_get('vkxp_group_id', '');
  }
  $params['message'] = $message;
  $params['attachments'] = $images;
  if (variable_get('vkxp_add_link', 0)) {
    if ($images) {
      $params['attachments'] .= ',' . $url;
    }
    else {
      $params['attachments'] = $url;
    }
  }
  $params['application_id'] = variable_get('vkxp_app_id', '');

  // Add script that will be shown on the first node load.
  $_SESSION['vkxp'][$node->nid] = $params;
}

/**
 * Log messages and print it on the screen.
 * @param $message: array with message and it severity.
 * @param $link: link to view node.
 */
function _vkxp_watchdog($message, $link = NULL) {
  drupal_set_message($message['text'], $message['severity']);
  if ($message['severity'] == 'status') {
    $severity = WATCHDOG_INFO;
  }
  elseif ($message['severity'] == 'warning') {
    $severity = WATCHDOG_WARNING;
  }
  else {
    $severity = WATCHDOG_ERROR;
  }
  watchdog('vkxp', $message['text'], array(), $severity, $link);
}

/**
 * Return image realpath by file ID.
 * @param  $fid: Image file ID.
 * @return string.
 */
function _vkxp_get_real_imagepath($fid) {
  $file_uri = file_load($fid)->uri;
  $schemes = array('public');
  $scheme = file_uri_scheme($file_uri);

  // Only serve shipped files and public created files from the CDN.
  if (!$scheme || in_array($scheme, $schemes)) {
    if (!$scheme) {
      $path = $file_uri;
    }
    else {
      $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
      $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($file_uri);
    }
    $path = str_replace('\\', '/', $path);
    return '@' . drupal_realpath($path);
  }
}
