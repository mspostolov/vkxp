<?php

/**
 * Implementation of hook_menu()
 */
function vkxp_menu() {
  $items = array();
  $items['admin/settings/vkxp'] = array(
    'title' => 'VKontakte CrossPoster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vkxp_admin_main_settings'),
    'access arguments' => array('administer vkontakte crossposter'),
    'file' => 'vkxp.admin.inc',
  );
  $items['admin/settings/vkxp/main'] = array(
    'title' => 'Main settings',
    'file' => 'vkxp.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/settings/vkxp/node'] = array(
    'title' => 'Node settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vkxp_admin_node_settings'),
    'access arguments' => array('administer vkontakte crossposter'),
    'file' => 'vkxp.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/settings/vkxp/images'] = array(
    'title' => 'Images settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vkxp_admin_images_settings'),
    'access arguments' => array('administer vkontakte crossposter'),
    'file' => 'vkxp.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function vkxp_perm() {
  return array('administer vkontakte crossposter', 'post to vkontakte');
}

/**
 * Implementation of hook_nodeapi
 */
function vkxp_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      if (variable_get('vkxp_enable', 0) && user_access('post to vkontakte')) {

        $selected_types = _vkxp_get_selected_node_types();
        // If current node related to selected types list - crosspost it
        if (in_array($node->type, $selected_types)) {
          // Get aliased node url
          $url = url('node/'. $node->nid, array('absolute' => TRUE));

          // Get body and trim if needed
          $message = trim(strip_tags($node->body));
          if (variable_get('vkxp_cut_body', 1)) {
            $length = variable_get('vkxp_cut_body_length', 255);
            if (drupal_strlen($message) > $length) {
              $message = drupal_substr($message, 0, $length - 3) . '...';
            }
          }
          // Post node to vk
          $upload_url = _vkxp_get_upload_server();
          if ($upload_url) {
            $images = _vkxp_get_node_images($node);
            $image_ids = _vkxp_upload_images($upload_url, $images);
            $response = _vkxp_post_to_wall($message, $image_ids);
            _vkxp_drupal_set_message($response);
          }
        }
      }
      break;
  }
}

function _vkxp_get_node_images($node) {
  $images = array();
  $image_amount = variable_get($node->type .'_image_amount', 0);
  if ($image_amount) {
    $field = variable_get($node->type .'_image_field', '');
    if ($field && isset($node->$field)) {
      $imagefield = $node->$field;
      $i = 0;
      foreach ($imagefield as $image) {
        if ($i++ == $image_amount) {
          break;
        }
        $images[] = '@'. realpath($image['filepath']);
      }
    }
  }
  return $images;
}

/**
 * Return selected node types
 */
function _vkxp_get_selected_node_types() {
  // Get node types that should be crossposted
  $types = variable_get('vkxp_node_types', array());
  $selected_types = array();
  foreach ($types as $key => $type) {
    if ($type) {
      $selected_types[$key] = $type;
    }
  }
  return $selected_types;
}

/**
 * Makes http query using cURL library
 * @param  $method: vkontakte api method
 * @param  $data: array of post fields
 * @param  string $url: uri to make query
 * @return server response
 */
function _vkxp_curl_post($method, $data, $url = 'https://api.vkontakte.ru/method/') {
  $curl = curl_init();
  curl_setopt ($curl, CURLOPT_URL, $url . $method);
  curl_setopt ($curl, CURLOPT_POST, 1);
  curl_setopt ($curl, CURLOPT_POSTFIELDS, $data);
  curl_setopt ($curl, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt ($curl, CURLOPT_RETURNTRANSFER, 1);
  $result = curl_exec($curl);
  curl_close($curl);
  return json_decode($result, true);
}

/**
 * Makes http query to api server to get upload uri
 * @return upload url on success or FALSE on failure
 */
function _vkxp_get_upload_server() {
  $access_token = variable_get('vkxp_access_token', '');
  $group_id = variable_get('vkxp_group_id', '');
  $params = array();
  $params['gid'] = $group_id;
  $params['access_token'] = $access_token;
  $result = _vkxp_curl_post('photos.getWallUploadServer', $params);
  if ($result['response']['upload_url']) {
    return $result['response']['upload_url'];
  }
  return FALSE;
}

/**
 * Upload and save images to vk server
 * @param  $upload_url: url of upload server
 * @param  $images: array of images to upload
 * @return string with uploaded image IDs separated by comma. Example: photo312312_3123123,photo312312_3123124
 */
function _vkxp_upload_images($upload_url, $images) {
  // Array with saved image IDs
  $image_ids = array();
  foreach ($images as $image) {
    // Upload photo
    $upload_result = _vkxp_curl_post('', array('photo' => $image), $upload_url);
    // If photo was uploaded it should be saved
    if ($upload_result['server'] && $upload_result['photo'] && $upload_result['hash']) {
      $params = array();
      $params['access_token'] = variable_get('vkxp_access_token', '');
      $params['server']       = $upload_result['server'];
      $params['photo']        = $upload_result['photo'];
      $params['hash']         = $upload_result['hash'];
      $params['gid']          = variable_get('vkxp_group_id', '');
      $save_result            = _vkxp_curl_post('photos.saveWallPhoto', $params);
      // If image was successfully saved it returns photo ID in format 'photoXXXXXXX_XXXXXXX'
      if ($save_result['response'][0]['id']) {
        $image_ids[] = $save_result['response'][0]['id'];
      }
    }
  }
  if ($image_ids) {
    return implode (',', $image_ids);
  }
  return '';
}

/**
 * Post node message with uploaded images to wall
 * @param  $message: text to post
 * @param  $images: string with photo IDs to post
 * @return array: server response
 */
function _vkxp_post_to_wall($message, $images) {
  $params = array();
  $params['owner_id'] = '-'. variable_get('vkxp_group_id', '');
  $params['message'] = $message;
  $params['from_group'] = variable_get('vkxp_official', 1);
  $params['attachments'] = $images;
  $params['access_token'] = variable_get('vkxp_access_token', '');
  $result = _vkxp_curl_post('wall.post', $params);
  return $result['response'];
}

/**
 * Set drupal message after node posting depends on server response
 * @param  $response: array with server response
 */
function _vkxp_drupal_set_message($response) {
  if ($response['post_id']) {
    drupal_set_message(t('Data was successfully posted to vkontakte.ru'));
  }
  elseif ($response['processing']) {
    drupal_set_message(t('Data for vkontakte.ru was accepted, but will be posted a little bit later'));
  }
  else {
    drupal_set_message(t('Data was not posted to vkontakte.ru.'), 'warning');
  }
}