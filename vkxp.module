<?php

// Define default variables
define('VKXP_DEFAULT_BROWSER', 'Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13)');

/**
 * Implementation of hook_menu()
 */
function vkxp_menu() {
  $items = array();
  $items['admin/settings/vkxp'] = array(
    'title' => 'VKontakte CrossPoster',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vkxp_admin_main_settings'),
    'access arguments' => array('administer vkontakte crossposter'),
    'file' => 'vkxp.admin.inc',
  );
  $items['admin/settings/vkxp/main'] = array(
    'title' => 'Main settings',
    'file' => 'vkxp.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/vkxp/node'] = array(
    'title' => 'Node settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vkxp_admin_node_settings'),
    'access arguments' => array('administer vkontakte crossposter'),
    'file' => 'vkxp.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function vkxp_perm() {
  return array('administer vkontakte crossposter');
}

/**
 * Implementation of hook_nodeapi
 */
function vkxp_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      if (variable_get('vkxp_enable', 0)) {

        // Get node types that should be crossposted
        $types = variable_get('vkxp_node_types', array());
        $selected_types = array();
        foreach ($types as $key => $type) {
          if ($type) {
            $selected_types[$key] = $type;
          }
        }

        // If current node related to selected types list - crosspost it!
        if (in_array($node->type, $selected_types)) {
          // Get aliased node url
          $url = url('node/'. $node->nid, array('absolute' => TRUE));

          // Get title and trim if needed
          $title = trim(strip_tags($node->title));
          if (variable_get('vkxp_cut_title', 1)) {
            $length = variable_get('vkxp_cut_title_length', 255);
            if (drupal_strlen($title) > $length) {
              $title = drupal_substr($title, 0, $length - 3) . '...';
            }
          }

          // Get body and trim if needed
          $body = trim(strip_tags($node->body));
          if (variable_get('vkxp_cut_body', 1)) {
            $length = variable_get('vkxp_cut_body_length', 255);
            if (drupal_strlen($body) > $length) {
              $body = drupal_substr($body, 0, $length - 3) . '...';
            }
          }

          $access_token = variable_get('vkxp_access_token', '');
          $group_id = variable_get('vkxp_group_id', '');

          //get upload server
          /*$params = array();
          $params['gid'] = $group_id;
          $params['access_token'] = $access_token;
          $data = http_build_query($params, '', '&');
          $result = _vkxp_curl_post('photos.getWallUploadServer', $data);
          $result = json_decode($result, true);
          $upload_url = $result['response']['upload_url'];
          drupal_set_message($upload_url);*/

          // Settings photo
          $photo = 'http://drupalace.ru/sites/all/themes/drupalace/logo.png';

          // Upload photo via http request
          /*$request_url = $upload_url .'&photo='. urlencode($photo);
          $request_headers = array();
          $request_method = 'POST';
          $request_retry = 3;
          $result = drupal_http_request($request_url, $request_headers, $request_method, NULL, $request_retry);
          drupal_set_message(print_r($result, 1));

          // Upload photo via cURL
          $params = array();
          $params['photo'] = 'http://cs11236.vkontakte.ru/u3546809/a_9c7bc351.jpg';
          $data = http_build_query($params, '', '&');
          $ch = curl_init();
          curl_setopt ($ch, CURLOPT_URL, $upload_url);
          curl_setopt ($ch, CURLOPT_POST, 1);
          curl_setopt ($ch, CURLOPT_POSTFIELDS, $data);
          curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
          curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
          curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
          $result = curl_exec($ch);
          curl_close($ch);
          $result = json_decode($result, true);
          drupal_set_message(print_r($result, 1));
          
          //savePhoto
          $params = array();
          $params['access_token'] = $access_token;
          $params['server'] = $result['server'];
          $params['photo'] = $result['photo'];
          $params['hash'] = $result['hash'];
          $params['gid'] = $group_id;
          $data = http_build_query($params);
          $result = _vkxp_curl_post('photos.saveWallPhoto', $data);
          $result = json_decode($result, true);
          drupal_set_message(print_r($result, 1));*/

          //post message
          $params = array();
          $params['owner_id'] = "-". $group_id;
          $params['message'] = $body;
          $params['from_group'] = 1;
          $params['access_token'] = $access_token;
          $data = http_build_query($params, '', '&');
          $result = _vkxp_curl_post('wall.post', $data);
          $result = json_decode($result, true);
          drupal_set_message(print_r($result, 1));
          $posted = $result['response']['post_id'] ? TRUE : FALSE;

          if ($posted) {
            drupal_set_message(t('Data was successfully posted to vkontakte.ru'));
          }
          else {
            drupal_set_message(t('Data was not posted to vkontakte.ru.'), 'warning');
          }
        }
      }
      break;
  }
}

function _vkxp_curl_post($method, $data, $url = 'https://api.vkontakte.ru/method/') {
  $ch = curl_init();
  curl_setopt ($ch, CURLOPT_URL, $url . $method);
  curl_setopt ($ch, CURLOPT_POST, 1);
  curl_setopt ($ch, CURLOPT_POSTFIELDS, $data);
  curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
  $result = curl_exec($ch);
  curl_close($ch);
  return $result;
}